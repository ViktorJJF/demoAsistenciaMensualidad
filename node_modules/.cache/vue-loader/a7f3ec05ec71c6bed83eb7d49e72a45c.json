{"remainingRequest":"/Users/victor/programacion/Masones/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/victor/programacion/Masones/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/victor/programacion/Masones/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/victor/programacion/Masones/src/views/BlogPosts.vue?vue&type=template&id=bbd0eff2&","dependencies":[{"path":"/Users/victor/programacion/Masones/src/views/BlogPosts.vue","mtime":1541078851000},{"path":"/Users/victor/programacion/Masones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/victor/programacion/Masones/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/victor/programacion/Masones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/victor/programacion/Masones/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}